теоретическая оценка производительности программы: 

Deikstra:      n раз вызвать TagNeighbours
TagNeighbours: n + n^2 + n + n 
(составить список соседей + отсортировать его + пройтись по нему, расставив новые теги + выбрать следующую вершину)

итого: n * (3n + n^2) ~ n^3

теоретическая же оценка сложности алгоритма Дейкстры равна O(n^2) 

расхождение диктуется необходимостью отсортировать соседей по значению тега в их вершине. данное расхождение можно уменьшить, выбрав другой алгоритм сортировки

непосредственные замеры:

8 вершин - 3.9e-5 сек
7 вершин - 3.8e-5 сек
6 вершин - 3.2e-5 сек
5 вершин - 2.6e-5 сек
4 вершин - 2.2e-5 сек
3 вершин - 1.9e-5 сек

на самом деле, эти данные очень плохо ложатся на кубическую зависимость (даже если подогнать коэффициенты начала у кубисеской функции, темп роста слишком мал). скорее всего, на таких масштабах изменения в производительности не стоит расценивать как связанные с размерами входных данных

при необходимости, можно написать автогенерацию графов размерности >~100 и замерить производительность для них. на усмотрение проверяющего